// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/updateUser/updateUser.proto

package go_micro_srv_updateUser

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UpdateUser service

type UpdateUserService interface {
	MicroGetUserInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	MicroUpdateUser(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateResp, error)
}

type updateUserService struct {
	c    client.Client
	name string
}

func NewUpdateUserService(name string, c client.Client) UpdateUserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.updateUser"
	}
	return &updateUserService{
		c:    c,
		name: name,
	}
}

func (c *updateUserService) MicroGetUserInfo(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UpdateUser.MicroGetUserInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateUserService) MicroUpdateUser(ctx context.Context, in *UpdateReq, opts ...client.CallOption) (*UpdateResp, error) {
	req := c.c.NewRequest(c.name, "UpdateUser.MicroUpdateUser", in)
	out := new(UpdateResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateUser service

type UpdateUserHandler interface {
	MicroGetUserInfo(context.Context, *Request, *Response) error
	MicroUpdateUser(context.Context, *UpdateReq, *UpdateResp) error
}

func RegisterUpdateUserHandler(s server.Server, hdlr UpdateUserHandler, opts ...server.HandlerOption) error {
	type updateUser interface {
		MicroGetUserInfo(ctx context.Context, in *Request, out *Response) error
		MicroUpdateUser(ctx context.Context, in *UpdateReq, out *UpdateResp) error
	}
	type UpdateUser struct {
		updateUser
	}
	h := &updateUserHandler{hdlr}
	return s.Handle(s.NewHandler(&UpdateUser{h}, opts...))
}

type updateUserHandler struct {
	UpdateUserHandler
}

func (h *updateUserHandler) MicroGetUserInfo(ctx context.Context, in *Request, out *Response) error {
	return h.UpdateUserHandler.MicroGetUserInfo(ctx, in, out)
}

func (h *updateUserHandler) MicroUpdateUser(ctx context.Context, in *UpdateReq, out *UpdateResp) error {
	return h.UpdateUserHandler.MicroUpdateUser(ctx, in, out)
}
